diff --git a/src/com/oltpbenchmark/api/Loader.java b/src/com/oltpbenchmark/api/Loader.java
index ff61bed..40b3f4d 100644
--- a/src/com/oltpbenchmark/api/Loader.java
+++ b/src/com/oltpbenchmark/api/Loader.java
@@ -57,6 +57,16 @@ public abstract class Loader<T extends BenchmarkModule> {
         public LoaderThread() throws SQLException {
             this.conn = Loader.this.benchmark.makeConnection();
             this.conn.setAutoCommit(false);
+
+            Statement stmtInit;
+    		try {
+    			stmtInit = this.conn.createStatement();
+    	        stmtInit.executeQuery("select launch()");
+    	        stmtInit.executeQuery("select enable_debug_mode(1)");
+    		} catch (SQLException e1) {
+    			// TODO Auto-generated catch block
+    			e1.printStackTrace();
+    		}
         }
         
         @Override
diff --git a/src/com/oltpbenchmark/api/Worker.java b/src/com/oltpbenchmark/api/Worker.java
index f04e08d..f00feab 100644
--- a/src/com/oltpbenchmark/api/Worker.java
+++ b/src/com/oltpbenchmark/api/Worker.java
@@ -95,6 +95,17 @@ public abstract class Worker<T extends BenchmarkModule> implements Runnable {
             this.class_procedures.put(proc.getClass(), proc);
             // e.getValue().generateAllPreparedStatements(this.conn);
         } // FOR
+
+        Statement stmtInit;
+		try {
+			stmtInit = conn.createStatement();
+	        stmtInit.executeQuery("select launch()");
+	        stmtInit.executeQuery("select enable_debug_mode(1)");
+		} catch (SQLException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
     }
 
     /**
diff --git a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Delivery.java b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Delivery.java
index 1110b4f..1e6dfea 100644
--- a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Delivery.java
+++ b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Delivery.java
@@ -20,6 +20,7 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.sql.Timestamp;
 import java.util.Random;
 
@@ -93,7 +94,6 @@ public class Delivery extends TPCCProcedure {
 	private PreparedStatement delivSumOrderAmount = null;
 	private PreparedStatement delivUpdateCustBalDelivCnt = null;
 
-
     public ResultSet run(Connection conn, Random gen,
 			int w_id, int numWarehouses,
 			int terminalDistrictLowerID, int terminalDistrictUpperID,
@@ -110,7 +110,7 @@ public class Delivery extends TPCCProcedure {
 		delivUpdateDeliveryDate = this.getPreparedStatement(conn, delivUpdateDeliveryDateSQL);
 		delivSumOrderAmount = this.getPreparedStatement(conn, delivSumOrderAmountSQL);
 		delivUpdateCustBalDelivCnt = this.getPreparedStatement(conn, delivUpdateCustBalDelivCntSQL);
-
+        Statement stm = conn.createStatement();
 		int d_id, c_id;
         float ol_total = 0;
         int[] orderIDs;
@@ -120,7 +120,8 @@ public class Delivery extends TPCCProcedure {
             delivGetOrderId.setInt(1, d_id);
             delivGetOrderId.setInt(2, w_id);
             if (trace) LOG.trace("delivGetOrderId START");
-            ResultSet rs = delivGetOrderId.executeQuery();
+            //ResultSet rs = delivGetOrderId.executeQuery();
+            ResultSet rs = stm.executeQuery(parse_query(delivGetOrderId.toString()));
             if (trace) LOG.trace("delivGetOrderId END");
             if (!rs.next()) {
                 // This district has no new orders
@@ -138,7 +139,8 @@ public class Delivery extends TPCCProcedure {
             delivDeleteNewOrder.setInt(2, d_id);
             delivDeleteNewOrder.setInt(3, w_id);
             if (trace) LOG.trace("delivDeleteNewOrder START");
-            int result = delivDeleteNewOrder.executeUpdate();
+            //int result = delivDeleteNewOrder.executeUpdate();
+            int result = stm.executeUpdate(parse_query(delivDeleteNewOrder.toString()));
             if (trace) LOG.trace("delivDeleteNewOrder END");
             if (result != 1) {
                 // This code used to run in a loop in an attempt to make this work
@@ -156,7 +158,8 @@ public class Delivery extends TPCCProcedure {
             delivGetCustId.setInt(2, d_id);
             delivGetCustId.setInt(3, w_id);
             if (trace) LOG.trace("delivGetCustId START");
-            rs = delivGetCustId.executeQuery();
+            //rs = delivGetCustId.executeQuery();
+            rs = stm.executeQuery(parse_query(delivGetCustId.toString()));
             if (trace) LOG.trace("delivGetCustId END");
 
             if (!rs.next()) {
@@ -173,7 +176,8 @@ public class Delivery extends TPCCProcedure {
             delivUpdateCarrierId.setInt(3, d_id);
             delivUpdateCarrierId.setInt(4, w_id);
             if (trace) LOG.trace("delivUpdateCarrierId START");
-            result = delivUpdateCarrierId.executeUpdate();
+            //result = delivUpdateCarrierId.executeUpdate();
+            result = stm.executeUpdate(parse_query(delivUpdateCarrierId.toString()));
             if (trace) LOG.trace("delivUpdateCarrierId END");
 
             if (result != 1) {
@@ -188,7 +192,8 @@ public class Delivery extends TPCCProcedure {
             delivUpdateDeliveryDate.setInt(3, d_id);
             delivUpdateDeliveryDate.setInt(4, w_id);
             if (trace) LOG.trace("delivUpdateDeliveryDate START");
-            result = delivUpdateDeliveryDate.executeUpdate();
+            //result = delivUpdateDeliveryDate.executeUpdate();
+            result = stm.executeUpdate(parse_query(delivUpdateDeliveryDate.toString()));
             if (trace) LOG.trace("delivUpdateDeliveryDate END");
 
             if (result == 0){
@@ -203,7 +208,8 @@ public class Delivery extends TPCCProcedure {
             delivSumOrderAmount.setInt(2, d_id);
             delivSumOrderAmount.setInt(3, w_id);
             if (trace) LOG.trace("delivSumOrderAmount START");
-            rs = delivSumOrderAmount.executeQuery();
+            //rs = delivSumOrderAmount.executeQuery();
+            rs = stm.executeQuery(parse_query(delivSumOrderAmount.toString()));
             if (trace) LOG.trace("delivSumOrderAmount END");
 
             if (!rs.next()) {
@@ -220,8 +226,12 @@ public class Delivery extends TPCCProcedure {
             delivUpdateCustBalDelivCnt.setInt(idx++, w_id);
             delivUpdateCustBalDelivCnt.setInt(idx++, d_id);
             delivUpdateCustBalDelivCnt.setInt(idx++, c_id);
+
+
+
             if (trace) LOG.trace("delivUpdateCustBalDelivCnt START");
-            result = delivUpdateCustBalDelivCnt.executeUpdate();
+            //result = delivUpdateCustBalDelivCnt.executeUpdate();
+            result = stm.executeUpdate(parse_query(delivUpdateCustBalDelivCnt.toString()));
             if (trace) LOG.trace("delivUpdateCustBalDelivCnt END");
 
             if (result == 0) {
diff --git a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java
index 4900be5..60feead 100644
--- a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java
+++ b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java
@@ -20,6 +20,7 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.Random;
 
 import org.apache.log4j.Logger;
@@ -105,8 +106,9 @@ public class NewOrder extends TPCCProcedure {
 	private PreparedStatement stmtGetStock = null;
 	private PreparedStatement stmtUpdateStock = null;
 	private PreparedStatement stmtInsertOrderLine = null;
-
-
+	Statement stm = null;
+	Statement stm2 = null;
+	Statement stm3 = null;
     public ResultSet run(Connection conn, Random gen,
 			int terminalWarehouseID, int numWarehouses,
 			int terminalDistrictLowerID, int terminalDistrictUpperID,
@@ -125,8 +127,9 @@ public class NewOrder extends TPCCProcedure {
 		stmtGetStock =this.getPreparedStatement(conn, stmtGetStockSQL);
 		stmtUpdateStock =this.getPreparedStatement(conn, stmtUpdateStockSQL);
 		stmtInsertOrderLine =this.getPreparedStatement(conn, stmtInsertOrderLineSQL);
-
-
+        stm = conn.createStatement();
+        stm2 = conn.createStatement();
+        stm3 = conn.createStatement();
 		int districtID = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);
 		int customerID = TPCCUtil.getCustomerID(gen);
 
@@ -187,7 +190,8 @@ public class NewOrder extends TPCCProcedure {
 			stmtGetCust.setInt(1, w_id);
 			stmtGetCust.setInt(2, d_id);
 			stmtGetCust.setInt(3, c_id);
-			ResultSet rs = stmtGetCust.executeQuery();
+			//ResultSet rs = stmtGetCust.executeQuery();
+            ResultSet rs = stm.executeQuery(parse_query(stmtGetCust.toString()));
 			if (!rs.next())
 				throw new RuntimeException("C_D_ID=" + d_id
 						+ " C_ID=" + c_id + " not found!");
@@ -198,7 +202,8 @@ public class NewOrder extends TPCCProcedure {
 			rs = null;
 
 			stmtGetWhse.setInt(1, w_id);
-			rs = stmtGetWhse.executeQuery();
+			//rs = stmtGetWhse.executeQuery();
+			rs = stm.executeQuery(parse_query(stmtGetWhse.toString()));
 			if (!rs.next())
 				throw new RuntimeException("W_ID=" + w_id + " not found!");
 			w_tax = rs.getFloat("W_TAX");
@@ -207,7 +212,8 @@ public class NewOrder extends TPCCProcedure {
 
 			stmtGetDist.setInt(1, w_id);
 			stmtGetDist.setInt(2, d_id);
-			rs = stmtGetDist.executeQuery();
+			//rs = stmtGetDist.executeQuery();
+			rs = stm.executeQuery(parse_query(stmtGetDist.toString()));
 			if (!rs.next()) {
 				throw new RuntimeException("D_ID=" + d_id + " D_W_ID=" + w_id
 						+ " not found!");
@@ -221,7 +227,9 @@ public class NewOrder extends TPCCProcedure {
 			//update next_order_id first, but it might doesn't matter
 			stmtUpdateDist.setInt(1, w_id);
 			stmtUpdateDist.setInt(2, d_id);
-			int result = stmtUpdateDist.executeUpdate();
+			//int result = stmtUpdateDist.executeUpdate();
+			int result = stm.executeUpdate(parse_query(stmtUpdateDist.toString()));
+
 			if (result == 0)
 				throw new RuntimeException(
 						"Error!! Cannot update next_order_id on district for D_ID="
@@ -238,14 +246,22 @@ public class NewOrder extends TPCCProcedure {
 			stmtInsertOOrder.setTimestamp(5, w.getBenchmarkModule().getTimestamp(System.currentTimeMillis()));
 			stmtInsertOOrder.setInt(6, o_ol_cnt);
 			stmtInsertOOrder.setInt(7, o_all_local);
-			stmtInsertOOrder.executeUpdate();
+			//stmtInsertOOrder.executeUpdate();
+			result = stm.executeUpdate(parse_query(stmtInsertOOrder.toString()));
+			if (result == 0)
+				throw new RuntimeException(
+						"Error!! Cannot update stmtInsertOOrder");
 			//insert ooder first]]
 			/*TODO: add error checking */
 
 			stmtInsertNewOrder.setInt(1, o_id);
 			stmtInsertNewOrder.setInt(2, d_id);
 			stmtInsertNewOrder.setInt(3, w_id);
-			stmtInsertNewOrder.executeUpdate();
+			//stmtInsertNewOrder.executeUpdate();
+			result = stm.executeUpdate(parse_query(stmtInsertNewOrder.toString()));
+			if (result == 0)
+				throw new RuntimeException(
+						"Error!! Cannot update stmtInsertNewOrder");
 			/*TODO: add error checking */
 
 
@@ -266,7 +282,8 @@ public class NewOrder extends TPCCProcedure {
 				ol_i_id = itemIDs[ol_number - 1];
 				ol_quantity = orderQuantities[ol_number - 1];
 				stmtGetItem.setInt(1, ol_i_id);
-				rs = stmtGetItem.executeQuery();
+				//rs = stmtGetItem.executeQuery();
+				rs = stm.executeQuery(parse_query(stmtGetItem.toString()));
 				if (!rs.next()) {
 					// This is (hopefully) an expected error: this is an
 					// expected new order rollback
@@ -290,7 +307,8 @@ public class NewOrder extends TPCCProcedure {
 
 				stmtGetStock.setInt(1, ol_i_id);
 				stmtGetStock.setInt(2, ol_supply_w_id);
-				rs = stmtGetStock.executeQuery();
+				//rs = stmtGetStock.executeQuery();
+				rs = stm.executeQuery(parse_query(stmtGetStock.toString()));
 				if (!rs.next())
 					throw new RuntimeException("I_ID=" + ol_i_id
 							+ " not found!");
@@ -329,8 +347,8 @@ public class NewOrder extends TPCCProcedure {
 				stmtUpdateStock.setInt(3, s_remote_cnt_increment);
 				stmtUpdateStock.setInt(4, ol_i_id);
 				stmtUpdateStock.setInt(5, ol_supply_w_id);
-				stmtUpdateStock.addBatch();
-
+				//stmtUpdateStock.addBatch();
+				stm2.addBatch(parse_query(stmtUpdateStock.toString()));
 				ol_amount = ol_quantity * i_price;
 				orderLineAmounts[ol_number - 1] = ol_amount;
 				total_amount += ol_amount;
@@ -384,13 +402,15 @@ public class NewOrder extends TPCCProcedure {
 				stmtInsertOrderLine.setInt(7, ol_quantity);
 				stmtInsertOrderLine.setDouble(8, ol_amount);
 				stmtInsertOrderLine.setString(9, ol_dist_info);
-				stmtInsertOrderLine.addBatch();
+				//stmtInsertOrderLine.addBatch();
+				stm3.addBatch(parse_query(stmtInsertOrderLine.toString()));
 
 			} // end-for
 
-			stmtInsertOrderLine.executeBatch();
-			stmtUpdateStock.executeBatch();
-
+			//stmtInsertOrderLine.executeBatch();
+			stm2.executeBatch();
+			//stmtUpdateStock.executeBatch();
+			stm3.executeBatch();
 			total_amount *= (1 + w_tax + d_tax) * (1 - c_discount);
 		} catch(UserAbortException userEx)
 		{
diff --git a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/OrderStatus.java b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/OrderStatus.java
index da03b5c..6f4f7dd 100644
--- a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/OrderStatus.java
+++ b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/OrderStatus.java
@@ -20,6 +20,7 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Random;
@@ -74,7 +75,7 @@ public class OrderStatus extends TPCCProcedure {
 	private PreparedStatement ordStatGetOrderLines = null;
 	private PreparedStatement payGetCust = null;
 	private PreparedStatement customerByName = null;
-
+    Statement stm = null;
 
     public ResultSet run(Connection conn, Random gen, int w_id, int numWarehouses, int terminalDistrictLowerID, int terminalDistrictUpperID, TPCCWorker w) throws SQLException {
         boolean trace = LOG.isTraceEnabled();
@@ -84,7 +85,7 @@ public class OrderStatus extends TPCCProcedure {
         customerByName = this.getPreparedStatement(conn, customerByNameSQL);
         ordStatGetNewestOrd = this.getPreparedStatement(conn, ordStatGetNewestOrdSQL);
         ordStatGetOrderLines = this.getPreparedStatement(conn, ordStatGetOrderLinesSQL);
-
+        stm = conn.createStatement();
         int d_id = TPCCUtil.randomNumber(terminalDistrictLowerID, terminalDistrictUpperID, gen);
         boolean c_by_name = false;
         int y = TPCCUtil.randomNumber(1, 100, gen);
@@ -120,7 +121,8 @@ public class OrderStatus extends TPCCProcedure {
         ordStatGetNewestOrd.setInt(2, d_id);
         ordStatGetNewestOrd.setInt(3, c.c_id);
         if (trace) LOG.trace("ordStatGetNewestOrd START");
-        ResultSet rs = ordStatGetNewestOrd.executeQuery();
+        //ResultSet rs = ordStatGetNewestOrd.executeQuery();
+        ResultSet rs = stm.executeQuery(parse_query(ordStatGetNewestOrd.toString()));
         if (trace) LOG.trace("ordStatGetNewestOrd END");
 
         if (!rs.next()) {
@@ -140,7 +142,8 @@ public class OrderStatus extends TPCCProcedure {
         ordStatGetOrderLines.setInt(2, d_id);
         ordStatGetOrderLines.setInt(3, w_id);
         if (trace) LOG.trace("ordStatGetOrderLines START");
-        rs = ordStatGetOrderLines.executeQuery();
+        //rs = ordStatGetOrderLines.executeQuery();
+        rs = stm.executeQuery(parse_query(ordStatGetOrderLines.toString()));
         if (trace) LOG.trace("ordStatGetOrderLines END");
 
         while (rs.next()) {
@@ -231,7 +234,8 @@ public class OrderStatus extends TPCCProcedure {
         payGetCust.setInt(2, c_d_id);
         payGetCust.setInt(3, c_id);
         if (trace) LOG.trace("payGetCust START");
-        ResultSet rs = payGetCust.executeQuery();
+        //ResultSet rs = payGetCust.executeQuery();
+        ResultSet rs = stm.executeQuery(parse_query(payGetCust.toString()));
         if (trace) LOG.trace("payGetCust END");
         if (!rs.next()) {
             String msg = String.format("Failed to get CUSTOMER [C_W_ID=%d, C_D_ID=%d, C_ID=%d]",
@@ -257,7 +261,8 @@ public class OrderStatus extends TPCCProcedure {
         customerByName.setInt(2, c_d_id);
         customerByName.setString(3, c_last);
         if (trace) LOG.trace("customerByName START");
-        ResultSet rs = customerByName.executeQuery();
+        //ResultSet rs = customerByName.executeQuery();
+        ResultSet rs = stm.executeQuery(parse_query(customerByName.toString()));
         if (trace) LOG.trace("customerByName END");
 
         while (rs.next()) {
diff --git a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Payment.java b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Payment.java
index 21b0555..0d2c12d 100644
--- a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Payment.java
+++ b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/Payment.java
@@ -20,6 +20,7 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.Random;
 
@@ -119,7 +120,7 @@ public class Payment extends TPCCProcedure {
     private PreparedStatement payUpdateCustBal = null;
     private PreparedStatement payInsertHist = null;
     private PreparedStatement customerByName = null;
-
+	Statement stm = null;
     public ResultSet run(Connection conn, Random gen,
                          int w_id, int numWarehouses,
                          int terminalDistrictLowerID, int terminalDistrictUpperID, TPCCWorker w) throws SQLException {
@@ -135,8 +136,7 @@ public class Payment extends TPCCProcedure {
         payUpdateCustBal = this.getPreparedStatement(conn, payUpdateCustBalSQL);
         payInsertHist = this.getPreparedStatement(conn, payInsertHistSQL);
         customerByName = this.getPreparedStatement(conn, customerByNameSQL);
-
-        // payUpdateWhse =this.getPreparedStatement(conn, payUpdateWhseSQL);
+        stm = conn.createStatement();
 
         int districtID = TPCCUtil.randomNumber(terminalDistrictLowerID, terminalDistrictUpperID, gen);
         int customerID = TPCCUtil.getCustomerID(gen);
@@ -177,12 +177,14 @@ public class Payment extends TPCCProcedure {
         payUpdateWhse.setInt(2, w_id);
         // MySQL reports deadlocks due to lock upgrades:
         // t1: read w_id = x; t2: update w_id = x; t1 update w_id = x
-        int result = payUpdateWhse.executeUpdate();
+        //int result = payUpdateWhse.executeUpdate();
+        int result = stm.executeUpdate(parse_query(payUpdateWhse.toString()));
         if (result == 0)
             throw new RuntimeException("W_ID=" + w_id + " not found!");
 
         payGetWhse.setInt(1, w_id);
-        ResultSet rs = payGetWhse.executeQuery();
+        //ResultSet rs = payGetWhse.executeQuery();
+        ResultSet rs = stm.executeQuery(parse_query(payGetWhse.toString()));
         if (!rs.next())
             throw new RuntimeException("W_ID=" + w_id + " not found!");
         w_street_1 = rs.getString("W_STREET_1");
@@ -197,13 +199,15 @@ public class Payment extends TPCCProcedure {
         payUpdateDist.setDouble(1, paymentAmount);
         payUpdateDist.setInt(2, w_id);
         payUpdateDist.setInt(3, districtID);
-        result = payUpdateDist.executeUpdate();
+        //result = payUpdateDist.executeUpdate();
+        result = stm.executeUpdate(parse_query(payUpdateDist.toString()));
         if (result == 0)
             throw new RuntimeException("D_ID=" + districtID + " D_W_ID=" + w_id + " not found!");
 
         payGetDist.setInt(1, w_id);
         payGetDist.setInt(2, districtID);
-        rs = payGetDist.executeQuery();
+        //rs = payGetDist.executeQuery();
+        rs = stm.executeQuery(parse_query(payGetDist.toString()));
         if (!rs.next())
             throw new RuntimeException("D_ID=" + districtID + " D_W_ID=" + w_id + " not found!");
         d_street_1 = rs.getString("D_STREET_1");
@@ -232,7 +236,8 @@ public class Payment extends TPCCProcedure {
             payGetCustCdata.setInt(1, customerWarehouseID);
             payGetCustCdata.setInt(2, customerDistrictID);
             payGetCustCdata.setInt(3, c.c_id);
-            rs = payGetCustCdata.executeQuery();
+            //rs = payGetCustCdata.executeQuery();
+            rs = stm.executeQuery(parse_query(payGetCustCdata.toString()));
             if (!rs.next())
                 throw new RuntimeException("C_ID=" + c.c_id + " C_W_ID=" + customerWarehouseID + " C_D_ID=" + customerDistrictID + " not found!");
             c_data = rs.getString("C_DATA");
@@ -250,7 +255,8 @@ public class Payment extends TPCCProcedure {
             payUpdateCustBalCdata.setInt(5, customerWarehouseID);
             payUpdateCustBalCdata.setInt(6, customerDistrictID);
             payUpdateCustBalCdata.setInt(7, c.c_id);
-            result = payUpdateCustBalCdata.executeUpdate();
+           // result = payUpdateCustBalCdata.executeUpdate();
+            result = stm.executeUpdate(parse_query(payUpdateCustBalCdata.toString()));
 
             if (result == 0)
                 throw new RuntimeException("Error in PYMNT Txn updating Customer C_ID=" + c.c_id + " C_W_ID=" + customerWarehouseID + " C_D_ID=" + customerDistrictID);
@@ -263,7 +269,8 @@ public class Payment extends TPCCProcedure {
             payUpdateCustBal.setInt(4, customerWarehouseID);
             payUpdateCustBal.setInt(5, customerDistrictID);
             payUpdateCustBal.setInt(6, c.c_id);
-            result = payUpdateCustBal.executeUpdate();
+            //result = payUpdateCustBal.executeUpdate();
+            result = stm.executeUpdate(parse_query(payUpdateCustBal.toString()));
 
             if (result == 0)
                 throw new RuntimeException("C_ID=" + c.c_id + " C_W_ID=" + customerWarehouseID + " C_D_ID=" + customerDistrictID + " not found!");
@@ -284,8 +291,8 @@ public class Payment extends TPCCProcedure {
         payInsertHist.setTimestamp(6, w.getBenchmarkModule().getTimestamp(System.currentTimeMillis()));
         payInsertHist.setDouble(7, paymentAmount);
         payInsertHist.setString(8, h_data);
-        payInsertHist.executeUpdate();
-
+        //payInsertHist.executeUpdate();
+        stm.executeUpdate(parse_query(payInsertHist.toString()));
         conn.commit();
 
         if (LOG.isTraceEnabled()) {
@@ -377,7 +384,8 @@ public class Payment extends TPCCProcedure {
         payGetCust.setInt(1, c_w_id);
         payGetCust.setInt(2, c_d_id);
         payGetCust.setInt(3, c_id);
-        ResultSet rs = payGetCust.executeQuery();
+        //ResultSet rs = payGetCust.executeQuery();
+        ResultSet rs = stm.executeQuery(parse_query(payGetCust.toString()));
         if (!rs.next()) {
             throw new RuntimeException("C_ID=" + c_id + " C_D_ID=" + c_d_id + " C_W_ID=" + c_w_id + " not found!");
         }
@@ -397,7 +405,8 @@ public class Payment extends TPCCProcedure {
         customerByName.setInt(1, c_w_id);
         customerByName.setInt(2, c_d_id);
         customerByName.setString(3, customerLastName);
-        ResultSet rs = customerByName.executeQuery();
+        //ResultSet rs = customerByName.executeQuery();
+        ResultSet rs = stm.executeQuery(parse_query(customerByName.toString()));
         if (LOG.isTraceEnabled()) LOG.trace("C_LAST=" + customerLastName + " C_D_ID=" + c_d_id + " C_W_ID=" + c_w_id);
 
         while (rs.next()) {
diff --git a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/StockLevel.java b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/StockLevel.java
index 7aa498f..1b48585 100644
--- a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/StockLevel.java
+++ b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/StockLevel.java
@@ -20,6 +20,7 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.Random;
 
 import org.apache.log4j.Logger;
@@ -63,7 +64,7 @@ public class StockLevel extends TPCCProcedure {
 	     
 	     stockGetDistOrderId = this.getPreparedStatement(conn, stockGetDistOrderIdSQL);
 	     stockGetCountStock= this.getPreparedStatement(conn, stockGetCountStockSQL);
-
+	     Statement stm = conn.createStatement();
 	     int threshold = TPCCUtil.randomNumber(10, 20, gen);
 	     int d_id = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);
 
@@ -74,7 +75,8 @@ public class StockLevel extends TPCCProcedure {
 	     stockGetDistOrderId.setInt(1, w_id);
          stockGetDistOrderId.setInt(2, d_id);
          if (trace) LOG.trace(String.format("stockGetDistOrderId BEGIN [W_ID=%d, D_ID=%d]", w_id, d_id));
-         ResultSet rs = stockGetDistOrderId.executeQuery();
+         //ResultSet rs = stockGetDistOrderId.executeQuery();
+         ResultSet rs = stm.executeQuery(parse_query(stockGetDistOrderId.toString()));
          if (trace) LOG.trace("stockGetDistOrderId END");
 
          if (!rs.next()) {
@@ -90,7 +92,8 @@ public class StockLevel extends TPCCProcedure {
          stockGetCountStock.setInt(5, w_id);
          stockGetCountStock.setInt(6, threshold);
          if (trace) LOG.trace(String.format("stockGetCountStock BEGIN [W_ID=%d, D_ID=%d, O_ID=%d]", w_id, d_id, o_id));
-         rs = stockGetCountStock.executeQuery();
+         //rs = stockGetCountStock.executeQuery();
+         rs = stm.executeQuery(parse_query(stockGetCountStock.toString()));
          if (trace) LOG.trace("stockGetCountStock END");
 
          if (!rs.next()) {
diff --git a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/TPCCProcedure.java b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/TPCCProcedure.java
index af855f2..ae4ba88 100644
--- a/src/com/oltpbenchmark/benchmarks/tpcc/procedures/TPCCProcedure.java
+++ b/src/com/oltpbenchmark/benchmarks/tpcc/procedures/TPCCProcedure.java
@@ -19,6 +19,7 @@ package com.oltpbenchmark.benchmarks.tpcc.procedures;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.Random;
 
 import com.oltpbenchmark.api.Procedure;
@@ -31,4 +32,28 @@ public abstract class TPCCProcedure extends Procedure {
             int terminalDistrictLowerID, int terminalDistrictUpperID,
             TPCCWorker w) throws SQLException;
 
+
+public String parse_query(String query) throws SQLException {
+	String out = "";
+
+	String[] queryArr = query.trim().split("\\s++");
+	for (int i = 0; i < queryArr.length; i++) {
+		if ((queryArr[i].equals("+")) || (queryArr[i].equals("=")) || (queryArr[i].equals("<")) || (queryArr[i].equals(">="))) {
+			out = out + " " + queryArr[i];
+			if ((queryArr[i-1].equals(queryArr[i+1])) || (queryArr[i-1].equals("OL_DELIVERY_D")) || (queryArr[i+1].equals("OL_I_ID")) || (queryArr[i-1].equals("C_LAST"))|| (queryArr[i-1].equals("C_DATA"))) {
+				out = out + " " + queryArr[i+1];
+			}
+			else {
+				out = out + " '" + queryArr[i+1].replaceAll(",", "") + "'";
+				if (queryArr[i+1].contains(","))
+					out = out + ", ";
+			}
+			i = i+1;
+		}
+		else
+			out = out + " " + queryArr[i] ;
+	}
+
+	return out;
+}
 }
