Only in mbedtls-2.6.0/configs: config-sgx.h
Only in mbedtls-2.6.0/include: glue.h
Only in mbedtls-2.6.0/include/mbedtls: config.h.orig
diff -ur -x config.h /home/fanz/Downloads/mbedtls-2.6.0/include/mbedtls/net_sockets.h mbedtls-2.6.0/include/mbedtls/net_sockets.h
--- /home/fanz/Downloads/mbedtls-2.6.0/include/mbedtls/net_sockets.h	2017-08-10 06:51:16.000000000 -0400
+++ mbedtls-2.6.0/include/mbedtls/net_sockets.h	2017-11-14 21:26:04.959712406 -0500
@@ -74,7 +74,7 @@
  *
  * \param ctx      Context to initialize
  */
-void mbedtls_net_init( mbedtls_net_context *ctx );
+void mbedtls_net_init_ocall( mbedtls_net_context *ctx );
 
 /**
  * \brief          Initiate a connection with host:port in the given protocol
@@ -91,7 +91,7 @@
  *
  * \note           Sets the socket in connected mode even with UDP.
  */
-int mbedtls_net_connect( mbedtls_net_context *ctx, const char *host, const char *port, int proto );
+int mbedtls_net_connect_ocall( mbedtls_net_context *ctx, const char *host, const char *port, int proto );
 
 /**
  * \brief          Create a receiving socket on bind_ip:port in the chosen
@@ -110,7 +110,7 @@
  * \note           Regardless of the protocol, opens the sockets and binds it.
  *                 In addition, make the socket listening if protocol is TCP.
  */
-int mbedtls_net_bind( mbedtls_net_context *ctx, const char *bind_ip, const char *port, int proto );
+int mbedtls_net_bind_ocall( mbedtls_net_context *ctx, const char *bind_ip, const char *port, int proto );
 
 /**
  * \brief           Accept a connection from a remote client
@@ -127,7 +127,7 @@
  *                  MBEDTLS_ERR_SSL_WANT_READ if bind_fd was set to
  *                  non-blocking and accept() would block.
  */
-int mbedtls_net_accept( mbedtls_net_context *bind_ctx,
+int mbedtls_net_accept_ocall( mbedtls_net_context *bind_ctx,
                         mbedtls_net_context *client_ctx,
                         void *client_ip, size_t buf_size, size_t *ip_len );
 
@@ -138,7 +138,7 @@
  *
  * \return         0 if successful, or a non-zero error code
  */
-int mbedtls_net_set_block( mbedtls_net_context *ctx );
+int mbedtls_net_set_block_ocall( mbedtls_net_context *ctx );
 
 /**
  * \brief          Set the socket non-blocking
@@ -147,7 +147,7 @@
  *
  * \return         0 if successful, or a non-zero error code
  */
-int mbedtls_net_set_nonblock( mbedtls_net_context *ctx );
+int mbedtls_net_set_nonblock_ocall( mbedtls_net_context *ctx );
 
 /**
  * \brief          Portable usleep helper
@@ -157,7 +157,7 @@
  * \note           Real amount of time slept will not be less than
  *                 select()'s timeout granularity (typically, 10ms).
  */
-void mbedtls_net_usleep( unsigned long usec );
+void mbedtls_net_usleep_ocall( unsigned long usec );
 
 /**
  * \brief          Read at most 'len' characters. If no error occurs,
@@ -171,7 +171,7 @@
  *                 or a non-zero error code; with a non-blocking socket,
  *                 MBEDTLS_ERR_SSL_WANT_READ indicates read() would block.
  */
-int mbedtls_net_recv( void *ctx, unsigned char *buf, size_t len );
+int mbedtls_net_recv_ocall( void *ctx, unsigned char *buf, size_t len );
 
 /**
  * \brief          Write at most 'len' characters. If no error occurs,
@@ -185,7 +185,7 @@
  *                 or a non-zero error code; with a non-blocking socket,
  *                 MBEDTLS_ERR_SSL_WANT_WRITE indicates write() would block.
  */
-int mbedtls_net_send( void *ctx, const unsigned char *buf, size_t len );
+int mbedtls_net_send_ocall( void *ctx, const unsigned char *buf, size_t len );
 
 /**
  * \brief          Read at most 'len' characters, blocking for at most
@@ -208,7 +208,7 @@
  *                 non-blocking. Handling timeouts with non-blocking reads
  *                 requires a different strategy.
  */
-int mbedtls_net_recv_timeout( void *ctx, unsigned char *buf, size_t len,
+int mbedtls_net_recv_timeout_ocall( void *ctx, unsigned char *buf, size_t len,
                       uint32_t timeout );
 
 /**
@@ -216,7 +216,7 @@
  *
  * \param ctx      The context to free
  */
-void mbedtls_net_free( mbedtls_net_context *ctx );
+void mbedtls_net_free_ocall( mbedtls_net_context *ctx );
 
 #ifdef __cplusplus
 }
diff -ur -x config.h /home/fanz/Downloads/mbedtls-2.6.0/library/rsa.c mbedtls-2.6.0/library/rsa.c
--- /home/fanz/Downloads/mbedtls-2.6.0/library/rsa.c	2017-08-10 06:51:16.000000000 -0400
+++ mbedtls-2.6.0/library/rsa.c	2017-11-14 21:14:00.786411163 -0500
@@ -1667,7 +1667,7 @@
 #endif
 }
 
-#if defined(MBEDTLS_SELF_TEST)
+#if defined(MBEDTLS_SELF_TEST) && defined(___)
 
 #include "mbedtls/sha1.h"
 
