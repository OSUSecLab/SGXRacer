--- ./crypto/err/err.c	2017-11-28 10:46:51.996404519 +0000
+++ ../talos/./crypto/err/err.c	2017-07-17 11:08:32.229409910 +0100
@@ -282,6 +282,12 @@
 static int int_thread_hash_references = 0;
 static int int_err_library_number = ERR_LIB_USER;
 
+#ifdef COMPILE_WITH_INTEL_SGX
+extern int my_vasprintf(char **strp, const char *fmt, va_list ap);
+#else
+#define my_vasprintf(strp, fmt, ap) vasprintf(strp, fmt, ap)
+#endif
+
 /* Internal function that checks whether "err_fns" is set and if not, sets it to
  * the defaults. */
 static void
@@ -692,6 +698,10 @@
 }
 
 void
+ecall_ERR_free_strings(void) {
+	ERR_free_strings();
+}
+void
 ERR_free_strings(void)
 {
 	err_fns_check();
@@ -720,6 +730,11 @@
 }
 
 void
+ecall_ERR_clear_error(void) {
+	ERR_clear_error();
+}
+
+void
 ERR_clear_error(void)
 {
 	int i;
@@ -733,6 +748,11 @@
 	es->top = es->bottom = 0;
 }
 
+unsigned long
+ecall_ERR_get_error(void)
+{
+	return ERR_get_error();
+}
 
 unsigned long
 ERR_get_error(void)
@@ -753,6 +773,11 @@
 	return (get_error_values(1, 0, file, line, data, flags));
 }
 
+unsigned long
+ecall_ERR_peek_error(void)
+{
+	return ERR_peek_error();
+}
 
 unsigned long
 ERR_peek_error(void)
@@ -767,6 +792,13 @@
 }
 
 unsigned long
+ecall_ERR_peek_error_line_data(const char **file, int *line,
+    const char **data, int *flags)
+{
+	return ERR_peek_error_line_data(file, line, data, flags);
+}
+
+unsigned long
 ERR_peek_error_line_data(const char **file, int *line,
     const char **data, int *flags)
 {
@@ -774,6 +806,11 @@
 }
 
 unsigned long
+ecall_ERR_peek_last_error(void) {
+	return ERR_peek_last_error();
+}
+
+unsigned long
 ERR_peek_last_error(void)
 {
 	return (get_error_values(0, 1, NULL, NULL, NULL, NULL));
@@ -859,6 +896,11 @@
 }
 
 void
+ecall_ERR_error_string_n(unsigned long e, char *buf, size_t len) 
+{
+	ERR_error_string_n(e, buf, len);
+}
+void
 ERR_error_string_n(unsigned long e, char *buf, size_t len)
 {
 	char lsbuf[30], fsbuf[30], rsbuf[30];
@@ -913,6 +955,36 @@
 	}
 }
 
+
+#ifdef COMPILE_WITH_INTEL_SGX
+#include "sgx_error.h"
+
+extern sgx_status_t ocall_malloc(void** ptr, size_t size);
+
+static char* ERR_error_string_str = NULL;
+#endif
+
+char *
+ecall_ERR_error_string(unsigned long e, char *ret) {
+	char *encbuf = ERR_error_string(e, ret);
+
+#ifdef COMPILE_WITH_INTEL_SGX
+	if (!ERR_error_string_str) {
+		ocall_malloc((void**)&ERR_error_string_str, 8192);
+	}
+
+	size_t len = strlen(encbuf);
+	if (len > 8191) { len = 8191; }
+	memcpy(ERR_error_string_str, encbuf, len);
+	ERR_error_string_str[len] = '\0';
+
+	if (ret == NULL) { ret = ERR_error_string_str; }
+	return ERR_error_string_str;
+#else
+	return encbuf;
+#endif
+}
+
 /* BAD for multi-threading: uses a local buffer if ret == NULL */
 /* ERR_error_string_n should be used instead for ret != NULL
  * as ERR_error_string cannot know how large the buffer is */
@@ -1009,6 +1081,10 @@
 
 #ifndef OPENSSL_NO_DEPRECATED
 void
+ecall_ERR_remove_state(unsigned long pid) {
+	ERR_remove_state(pid);
+}
+void
 ERR_remove_state(unsigned long pid)
 {
 	ERR_remove_thread_state(NULL);
@@ -1085,7 +1161,7 @@
 	int r;
 
 	va_start(ap, format);
-	r = vasprintf(&errbuf, format, ap);
+	r = my_vasprintf(&errbuf, format, ap);
 	va_end(ap);
 	if (r == -1)
 		ERR_set_error_data("malloc failed", ERR_TXT_STRING);
@@ -1115,7 +1191,7 @@
 			return;
 		}
 	}
-	if (vasprintf(&errbuf, format, args) == -1)
+	if (my_vasprintf(&errbuf, format, args) == -1)
 		ERR_set_error_data("malloc failed", ERR_TXT_STRING);
 	else
 		ERR_set_error_data(errbuf, ERR_TXT_MALLOCED|ERR_TXT_STRING);
