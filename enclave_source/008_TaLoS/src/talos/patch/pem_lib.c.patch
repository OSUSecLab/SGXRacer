--- ./crypto/pem/pem_lib.c	2019-09-04 14:50:24.054778193 +0900
+++ ../talos/./crypto/pem/pem_lib.c	2019-09-04 14:49:12.086301165 +0900
@@ -71,6 +71,8 @@
 #include <openssl/pkcs12.h>
 #include <openssl/x509.h>
 
+#include <openssl/ssl.h>
+
 #ifndef OPENSSL_NO_DES
 #include <openssl/des.h>
 #endif
@@ -82,6 +84,12 @@
 
 #define MIN_LENGTH	4
 
+#ifdef COMPILE_WITH_INTEL_SGX
+extern int my_fprintf(FILE *stream, const char *format, ...);
+#else
+#define my_fprintf(stream, format, ...) fprintf(stream, format, __VA_ARGS__)
+#endif
+
 static int load_iv(char **fromp, unsigned char *to, int num);
 static int check_pem(const char *nm, const char *name);
 int pem_check_suffix(const char *pem_str, const char *suffix);
@@ -119,7 +127,7 @@
 		}
 		l = strlen(buf);
 		if (l < MIN_LENGTH) {
-			fprintf(stderr, "phrase is too short, "
+			my_fprintf(stderr, "phrase is too short, "
 			    "needs to be at least %zu chars\n",
 			    (size_t)MIN_LENGTH);
 		} else
@@ -324,6 +332,15 @@
 }
 
 int
+ecall_PEM_ASN1_write(i2d_of_void *i2d, const char *name, void *fp, void *x,
+    const EVP_CIPHER *enc, unsigned char *kstr, int klen,
+    pem_password_cb *callback, void *u)
+{
+	//PL: i2d is a function pointer to i2d_SSL_SESSION outside the enclave
+	//as it is an ecall, we replace the pointer here directly to avoid making an ocall
+	return PEM_ASN1_write((int(*)())i2d_SSL_SESSION, name, (FILE*)fp, x, enc, kstr, klen, callback, u);
+}
+int
 PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp, void *x,
     const EVP_CIPHER *enc, unsigned char *kstr, int klen,
     pem_password_cb *callback, void *u)
@@ -403,7 +420,7 @@
 			goto err;
 
 		if (kstr == (unsigned char *)buf)
-			explicit_bzero(buf, PEM_BUFSIZE);
+			bzero(buf, PEM_BUFSIZE);
 
 		if (strlen(objstr) + 23 + 2 * enc->iv_len + 13 > sizeof buf) {
 			PEMerr(PEM_F_PEM_ASN1_WRITE_BIO,
@@ -434,12 +451,12 @@
 	if (i <= 0)
 		ret = 0;
 err:
-	explicit_bzero(key, sizeof(key));
-	explicit_bzero(iv, sizeof(iv));
-	explicit_bzero((char *)&ctx, sizeof(ctx));
-	explicit_bzero(buf, PEM_BUFSIZE);
+	bzero(key, sizeof(key));
+	bzero(iv, sizeof(iv));
+	bzero((char *)&ctx, sizeof(ctx));
+	bzero(buf, PEM_BUFSIZE);
 	if (data != NULL) {
-		explicit_bzero(data, (unsigned int)dsize);
+		bzero(data, (unsigned int)dsize);
 		free(data);
 	}
 	return (ret);
@@ -480,8 +497,8 @@
 	if (o)
 		o = EVP_DecryptFinal_ex(&ctx, &(data[i]), &j);
 	EVP_CIPHER_CTX_cleanup(&ctx);
-	explicit_bzero((char *)buf, sizeof(buf));
-	explicit_bzero((char *)key, sizeof(key));
+	bzero((char *)buf, sizeof(buf));
+	bzero((char *)key, sizeof(key));
 	if (!o) {
 		PEMerr(PEM_F_PEM_DO_HEADER, PEM_R_BAD_DECRYPT);
 		return (0);
@@ -640,7 +657,7 @@
 	EVP_EncodeFinal(&ctx, buf, &outl);
 	if ((outl > 0) && (BIO_write(bp, (char *)buf, outl) != outl))
 		goto err;
-	explicit_bzero(buf, PEM_BUFSIZE * 8);
+	bzero(buf, PEM_BUFSIZE * 8);
 	free(buf);
 	buf = NULL;
 	if ((BIO_write(bp, "-----END ", 9) != 9) ||
@@ -651,7 +668,7 @@
 
 err:
 	if (buf) {
-		explicit_bzero(buf, PEM_BUFSIZE * 8);
+		bzero(buf, PEM_BUFSIZE * 8);
 		free(buf);
 	}
 	PEMerr(PEM_F_PEM_WRITE_BIO, reason);
