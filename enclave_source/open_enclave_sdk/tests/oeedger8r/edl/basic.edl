// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

enclave  {
    // Enum for primitive types.
    // Currently only supports non portable types.
    enum type_enum_t {
        TYPE_WCHAR_T,
        TYPE_LONG,
        TYPE_UNSIGNED_LONG,
        TYPE_LONG_DOUBLE
    };

    trusted {

        /* Test all basic type parameters */
        public void ecall_basic_types(
            char arg1,
            short arg2,
            int arg3,
            float arg4,
            double arg5,
            size_t arg6,
            unsigned arg7,
            int8_t arg8,
            int16_t arg9,
            int32_t arg10,
            int64_t arg11,
            uint8_t arg12,
            uint16_t arg13,
            uint32_t arg14,
            uint64_t arg15,
            long long arg16,
            unsigned char arg17,
            unsigned short arg18,
            unsigned int arg19,
            unsigned long long arg20
        );

        public void ecall_basic_non_portable_types(
            wchar_t arg1,
            long arg2,
            unsigned long arg3,
            long double arg4
        );

        // Get the size of the given type.
        public uint64_t get_enclave_sizeof(type_enum_t t);

        /* Test all basic types are return type */
        public char ecall_ret_char();
        public wchar_t ecall_ret_wchar_t();
        public short ecall_ret_short();
        public int ecall_ret_int();
        public float ecall_ret_float();
        public double ecall_ret_double();
        public long ecall_ret_long();
        public size_t ecall_ret_size_t();
        public unsigned ecall_ret_unsigned();
        public int8_t ecall_ret_int8_t();
        public int16_t ecall_ret_int16_t();
        public int32_t ecall_ret_int32_t();
        public int64_t ecall_ret_int64_t();
        public uint8_t ecall_ret_uint8_t();
        public uint16_t ecall_ret_uint16_t();
        public uint32_t ecall_ret_uint32_t();
        public uint64_t ecall_ret_uint64_t();
        public long long ecall_ret_long_long();
        public unsigned char ecall_ret_unsigned_char();
        public unsigned short ecall_ret_unsigned_short();
        public unsigned int ecall_ret_unsigned_int();
        public unsigned long ecall_ret_unsigned_long();
        public long double ecall_ret_long_double();
        public unsigned long long ecall_ret_unsigned_long_long();
        public void ecall_ret_void();

        public void test_basic_edl_ocalls();
    };

    untrusted {
        /* Test all basic type parameters */
        void ocall_basic_types(
            char arg1,
            short arg2,
            int arg3,
            float arg4,
            double arg5,
            size_t arg6,
            unsigned arg7,
            int8_t arg8,
            int16_t arg9,
            int32_t arg10,
            int64_t arg11,
            uint8_t arg12,
            uint16_t arg13,
            uint32_t arg14,
            uint64_t arg15,
            long long arg16,
            unsigned char arg17,
            unsigned short arg18,
            unsigned int arg19,
            unsigned long long arg20
        );

        void ocall_basic_non_portable_types(
            wchar_t arg1,
            long arg2,
            unsigned long arg3,
            long double arg4
        );

        // Get the size of the given type.
        uint64_t get_host_sizeof(type_enum_t t);

        /* Test all basic types are return type */
        char ocall_ret_char();
        wchar_t ocall_ret_wchar_t();
        short ocall_ret_short();
        int ocall_ret_int();
        float ocall_ret_float();
        double ocall_ret_double();
        long ocall_ret_long();
        size_t ocall_ret_size_t();
        unsigned ocall_ret_unsigned();
        int8_t ocall_ret_int8_t();
        int16_t ocall_ret_int16_t();
        int32_t ocall_ret_int32_t();
        int64_t ocall_ret_int64_t();
        uint8_t ocall_ret_uint8_t();
        uint16_t ocall_ret_uint16_t();
        uint32_t ocall_ret_uint32_t();
        uint64_t ocall_ret_uint64_t();
        long long ocall_ret_long_long();
        unsigned char ocall_ret_unsigned_char();
        unsigned short ocall_ret_unsigned_short();
        unsigned int ocall_ret_unsigned_int();
        unsigned long ocall_ret_unsigned_long();
        long double ocall_ret_long_double();
        unsigned long long ocall_ret_unsigned_long_long();

        void ocall_ret_void();
    };
};
