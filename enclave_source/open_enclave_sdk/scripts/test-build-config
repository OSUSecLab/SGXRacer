#!/usr/bin/env bash

# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

##====================================================================================
##
## This script fires OE build and test for specified build-type, platform and
## simulation/hardware mode.
## Default run with no parameters builds with Debug build-type and for SGX1
## platform and will test in simulation.
## Run this from the root of the source tree as sudo.
## Please note that this script does not install any packages needed for build/test.
## Please install all packages necessary for your test before invoking this script.
## For CI runs, the Docker image will contain the necessary packages.
##
##====================================================================================
if [[ $1 == "-h" || $1 == "--help" ]]; then
   echo "Script to fire OE build and test with specified platform/build-type/test mode" 
   echo " Usage: "
   echo " ./scripts/test-build-config"
   echo "        -d or --disable_sim to Disable Simulation Test Mode"
   echo "        -p SGX1FLC or -p=SGX1FLC to build for SGX1FLC platform"
   echo "        -b Debug|RelWithDebInfo|Release or -b=Debug|RelWithDebInfo|Release"
   echo "        -h or --help to Display usage and exit"
   echo "        --compiler=[clang-7,gcc] to build with a specified compiler"
   echo "        --build_package to Build a .deb package after testing"
   echo "        --enable_full_libcxx_tests to Enable libcxx tests"
   echo "        --enable_full_libc_tests to Enable libc tests"
   echo " Default is to build for SGX1 platform, Debug Build type & test in"
   echo " simulation"
   echo ""
   exit 0
fi

# Default values for the arguments
# Disable Simulation test mode to run on SGX hardware
# Default test mode is simulation, disable simulation test mode with -d or --disable_sim
DISABLE_SIM=0
# Valid PLATFORM_MODE values are SGX1 or SGX1FLC
PLATFORM_MODE="SGX1"
# Valid BUILDTYPE values are Debug|Release|RelWithDebInfo
BUILD_TYPE="DEBUG"
# Build a package. Default is disabled
BUILD_PACKAGE=0
OE_INSTALL_DIR="/opt/openenclave"
# Flag for enabling full libcxx tests.
ENABLE_FULL_LIBCXX_TESTS=0
# Valid COMPILER_VALUE inputs are clang-7|gcc
COMPILER_VALUE="clang-7"

# Parse the command line - keep looping as long as there is at least one more argument
while [[ $# -gt 0 ]]; do
    key=$1
    case $key in
        # This is a flag type option. Will catch either -d or --disable_sim
        -d|--disable_sim)
        DISABLE_SIM=1
        ;;
        # This is a flag type option. Will catch --build_package
        --build_package)
        BUILD_PACKAGE=1
        ;;
        # This is an arg value type option. Will catch -p value or --platform_mode value
        -p|--platform_mode)
        shift # past the key and to the value
        PLATFORM_MODE=$1
        ;;
        # This is an arg=value type option. Will catch -p=value or --platform_mode=value
        -p=*|--platform_mode=*)
        # No need to shift here since the value is part of the same string
        PLATFORM_MODE="${key#*=}"
        ;;
        # This is an arg value type option. Will catch -b value or --build_type value
        -b|--build_type)
        shift # past the key and to the value
        BUILD_TYPE=$1
        ;;
        --compiler=*)
        COMPILER_VALUE="${key#*=}"
        ;;
        # This is an arg=value type option. Will catch -b=value or --build_type=value
        -b=*|--build_type=*)
        # No need to shift here since the value is part of the same string
        BUILD_TYPE="${key#*=}"
        ;;
        --enable_full_libcxx_tests)
        ENABLE_FULL_LIBCXX_TESTS=1
        ;;
        *)
        echo "Unknown option '${key}'"
        exit 1
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done

echo "DISABLE SIMULATOR MODE = ${DISABLE_SIM}"
PLATFORM_MODE=$(echo "$PLATFORM_MODE" | tr '[:lower:]' '[:upper:]')
echo "PLATFORM MODE = ${PLATFORM_MODE}"
BUILD_TYPE=$(echo "$BUILD_TYPE" | tr '[:lower:]' '[:upper:]')
echo "BUILD_TYPE = ${BUILD_TYPE}"

# Check if the parameter values are correct
if [[ ${PLATFORM_MODE} != "SGX1" && ${PLATFORM_MODE} != "SGX1FLC" ]]; then
   echo "Invalid value for ${PLATFORM_MODE}"
   exit 1
fi

if [[ ${BUILD_TYPE} != "DEBUG" && ${BUILD_TYPE} != "RELEASE" && ${BUILD_TYPE} != "RELWITHDEBINFO" ]]; then
   echo "Invalid value for ${BUILD_TYPE}"
   exit 1
fi

# Delete the build directory if it exists. This allows calling this script iteratively
# for multiple configurations for a platform.
if [[ -d ./build ]]; then
  rm -rf ./build
fi

mkdir build && cd build || exit 1

CMAKE="cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
if [[ ${PLATFORM_MODE} == "SGX1FLC" ]]; then
    CMAKE+=" -DHAS_QUOTE_PROVIDER=1"
fi
if [[ ${BUILD_PACKAGE} -eq 1 ]]; then
    CMAKE+=" -DCMAKE_INSTALL_PREFIX=${OE_INSTALL_DIR} -DCPACK_GENERATOR=DEB"
fi
if [[ ${ENABLE_FULL_LIBCXX_TESTS} -eq 1 ]]; then
    CMAKE+=" -DENABLE_FULL_LIBCXX_TESTS=1"
fi

echo "CMake command is '${CMAKE}'"

if [[ ${COMPILER_VALUE} == "gcc" ]]; then
    export CC="gcc"
    export CXX="g++"
elif [[ ${COMPILER_VALUE} == "clang-7" ]]; then
    export CC="clang-7"
    export CXX="clang++-7"
fi

if ! ${CMAKE}; then
    echo ""
    echo "cmake failed for ${PLATFORM_MODE}"
    echo ""
    exit 1
fi

if ! make; then
    echo ""
    echo "Build failed for ${PLATFORM_MODE}"
    echo ""
    exit 1
fi

# Finally run the tests in simulation or on Hardware
if [[ ${DISABLE_SIM} -ne 1 ]]; then
    SIMULATION_MODE_TEXT="simulation"
    export OE_SIMULATION=1
else
    SIMULATION_MODE_TEXT="hardware"
fi

if ! ctest --output-on-failure; then
    echo ""
    echo "Test failed for ${PLATFORM_MODE} ${COMPILER_VALUE} ${BUILD_TYPE} in ${SIMULATION_MODE_TEXT} mode"
    echo ""
    exit 1
fi

if [[ ${BUILD_PACKAGE} -eq 1 ]]; then
    echo "Building package"
    echo ""
    make package
fi
